---
title: "CEVE 101: Project 03"
author: "Lucas Leung (ll162)"
date: "2024-10-23"
output: html_document
kernel: julia-1.11
code-annotations: hover
format:
    html: default
    docx: default
---



```{julia}
using Revise                      # <1>
using RainwaterHarvesting         # <2>
```

1. `Revise` allows us to update code without restarting Julia.
2. We load the `RainwaterHarvesting` package that contains our simulation tools.

### Setting the file path

```{julia}
filepath = "data/79.txt" # <1>   
rainfall_data = RainfallData(filepath) # <2>
```

1. This is the path to the rainfall data file for the station of interest.
2. This creates a `RainfallData` object containing the rainfall data for the specified station.


### Plotting the Data

We can plot the data for one or all of the years to verify that it looks correct.

```{julia}
plot(rainfall_data) # <1>
```

1. This `plot` function is defined in [viz.jl](./RainwaterHarvesting/src/viz.jl) and is a thin wrapper around the Plots.jl package.

### Discussion

The remaining data after data cleaning is sufficient. There is a lot of data for Jucas with a range of around 50 years, so it is likely to capture years with droughts. In Ceará, the largest droughts occured during the years 1877–1879, 1915, 1931, 1973, 1983, 1993, 1998, and 2012-2018. The droughts that fall under the data range for Jucas should are in the years 1983, 1993, 1998, and 2012-2018. Areas in the data plot that have missing gaps of data are indicative of a drought. In Jucas, there were several gaps in 1983 and 1998, and a large gap of data starting in 2013, which were all years with major droughts in Ceará. However, there is no significant gap in the data during the drought year of 1993, meaning that while the state of Ceará recieved less rain overall, Jucas did not.

## Understanding the Theoretical Model

The major assumptions in the model have to do with consumption of the water. It assumes that for every year, water begins being consumed after 150 days at a rate of 74.1 liters per day per household. While 74.1 liters per household is a reasonable approximation for an average, assuming that consumption starts 150 days into the year every year is unlikely to give accurate results, since it it varies per year. To relax these uncertainties, it is best to survey households in the city of Jucas, rather than use generalized data from Ceará. Then, use the survey data in the mathematical model instead of the data from Ceará. Adding a margin of error to the model would also be useful for analysis. 

## Model Implementation and Testing

I cut the roof area in half from 45.0 m^2 to 35.0 m^2 and kept the capacity constant L to see how big of an impact a smaller collection system would have. With an area of 45.0 m^2, only 3 of the 45 years experienced failures, but decreasing the area to 35.0 m^2 made it so 28 of 45 years experienced failures. 

The decrease in tank collection area lowered its reliability from 93.3% to 37.8%.

An assumption the current model makes is that throughout the dry season, households use the same amount of water every day. What  might be more likely is that the amount of water used per day decreases as people notice the water in the tank is running out. To address this, the amount of water consumption would have to be surveyed and compared to the amount of water in the tank at several points during the dry season. If there is a relationship, the mathematical model should treat water consumption as a function of the water in the tank instead of a constant. This will improve the accuracy of the model by reducing assumptions.

### Defining the Model Parameters

We can define the model parameters with sensible default values.
You will have the opportunity to change these values later.

```{julia}
#| output: false
param = ModelParameters(          # <1>
    runoff_coefficient=0.85,      # <2>
    roof_area_m2=22.5,            # <3>
    first_flush_mm=2.0,           # <4>
    tank_capacity_L=16000.0       # <5>
)
```

1. This creates a `ModelParameters` object with the specified parameters.
2. The runoff coefficient ($\eta$) is a measure of how much of the rain that falls on the roof ends up in the tank.
3. The roof area ($A$) is the area of the roof that the rain falls on.
4. The first flush volume ($V_f$) is the volume of rain that is discarded because it is dirty.
5. The tank capacity ($V_\text{max}$) is the maximum volume of the tank.

### Running the Simulation for One Year

Let's run the model for the year 1981.

```{julia}
rainfall_1981 = rainfall_data.annual_data[1981]    # <1>
results_1981 = run_timesteps(rainfall_1981, param) # <2>
p1 = plot(results_1981)                                 # <3>
```

1. We select the annual rainfall data for the year 1981.
2. We run the simulation for the year 1981.
3. We plot the results, again using a `plot` function defined in [viz.jl](./RainwaterHarvesting/src/viz.jl).

To compare rainfall and tank volume:

```{julia}
p2 = plot(rainfall_1981)
plot(p2, p1, layout=(2, 1), size=(1000, 700), link=:x)
```

Observe how the tank's water level responds to rainfall events.
Note any periods when the tank runs dry or overflows.

### Reliability Analysis

We can run simulations for all years, one at a time, and then check how many times the tank runs dry.
You can run simulations for all years at once with the following code:

```{julia}
all_years = sort(collect(keys(rainfall_data.annual_data)))          # <1>
all_results = [run_timesteps(rainfall_data.annual_data[year], param) for year in all_years]   # <2>
any_failures = [!isempty(result.failure_dates) for result in all_results]  # <3>
println("Number of years with failures: ", sum(any_failures), " out of ", length(all_years))  # <4>
```

1. We get all the years in order.
2. We run the simulation for each year.
3. We check if any failures occurred.
4. We print the number of years with failures and the total number of years.
